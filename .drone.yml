  #################################################### Nightly Steps ############################################################
kind: pipeline
type: docker
name: vccs-web-nightly
trigger:
  event:
    - cron
concurrency:
  limit: 1
volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

steps:

  # Execute OWASP Zap tests
  - name: owasp zap tests
    image: owasp/zap2docker-stable
    commands:
      - mkdir -p /zap/wrk
      - cp zap.conf /zap/wrk/zap.conf
      - cd /zap
      - zap-full-scan.py -t http://vccs-alb-dev-149543272.eu-west-2.elb.amazonaws.com -c zap.conf
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

    # Build end to end tests docker image
  - name: build end to end test image
    image: docker:git
    commands:
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-QA-selenium.git
      - cd JAQU-CAZ-QA-selenium
      - docker build -t selenium-jaqu .
    environment:
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

    # Run end to end tests
  - name: run end to end tests
    image: selenium-jaqu
    pull: never
    environment:
      BS_USERNAME:
        from_secret: browserstack_username
      BS_AUTHKEY:
        from_secret: browserstack_auth_key
      BASEURL_VCCS: 'http://vccs-alb-dev-149543272.eu-west-2.elb.amazonaws.com'
      VALID_USERNAME: 'edmond.chhung@informed.com'
      VALID_PASSWORD: 'Edc123.,'
      BROWSER_SET: 'min'
      SCREENSHOT_TYPE: 'base'
      VCCS_USER: 'vccsservice'
      VCCS_PASSWORD: 'Password001!'
      BUILD: ${DRONE_BUILD_NUMBER}
      SPECTRE: false
      LOCATION: browserstack
    commands:
      - cd JAQU-CAZ-QA-selenium
      - cucumber -t @VCCS --retry 3

  ################################################# End Nightly Steps ############################################################

---












  ################################################### DEV Steps ########################################################

kind: pipeline
type: docker
name: vccs-web-dev
trigger:
  branch:
    - develop
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker
    commands:
    - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker image
  - name: build
    image: docker
    commands:
    - docker build -f Dockerfile.test -t test-vehicle-compliance-checker-frontend:latest --build-arg secret_key_base=${DRONE_COMMIT} .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Trigger unit tests
  - name: unit tests
    image: test-vehicle-compliance-checker-frontend
    pull: never
    environment:
      COMPLIANCE_CHECKER_API_URL: http://localhost
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - yarn install
      - rspec -f d

  # Execute integration/scenario tests
  - name: integration tests
    image: test-vehicle-compliance-checker-frontend
    pull: never
    environment:
      COMPLIANCE_CHECKER_API_URL: https://s5fbiclr6j.execute-api.eu-west-2.amazonaws.com/dev
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - cucumber

  # Invoke static code analysis through Ruby libraries
  - name: static code analysis (Ruby)
    image: test-vehicle-compliance-checker-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - rubocop

  # Invoke security analysis through Ruby libraries
  - name: security tests (Ruby)
    image: test-vehicle-compliance-checker-frontend
    pull: never
    commands:
       - bundle audit check --update
       - yarn audit
       - brakeman
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Invoke terraform scripts to ensure ecr is available for deploy step.
  - name: initialise ecr
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - cd terraform/projects/vccs/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      when:
        event:
          - push

  - name: publish image to ecr
    image: plugins/ecr
    settings:
      access_key:
        from_secret: aws_access_key_id
      secret_key:
        from_secret: aws_secret_access_key
      repo: 018330602464.dkr.ecr.eu-west-2.amazonaws.com/vccs-web
      registry: 018330602464.dkr.ecr.eu-west-2.amazonaws.com
      dockerfile: Dockerfile.build
      region: eu-west-2
      tags:
        - latest
        - ${DRONE_BUILD_NUMBER}
      build_args:
        - secret_key_base=${DRONE_COMMIT}
    when:
      event:
        - push

    # Invoke sonar scan
  - name: sonar scan
    image: aosapps/drone-sonar-plugin
    environment:
      SONAR_HOST:
        from_secret: sonar_host
      SONAR_TOKEN:
        from_secret: sonar_token
      sonar.ruby.coverage.reportPaths: coverage/.resultset.json
    commands:
      - sonar-scanner
        -Dsonar.projectKey=${DRONE_REPO}
        -Dsonar.projectName=${DRONE_REPO}
        -Dsonar.host.url=$SONAR_HOST
        -Dsonar.login=$SONAR_TOKEN
        -Dproject.settings=./sonar-project.properties

  # Invoke terraform scripts with tagged image number
  - name: deploy to dev
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - cd JAQU-CAZ-IAC
      - cd terraform/projects/vccs/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base: ${DRONE_COMMIT}
      TF_VAR_google_analytics_id: UA-144774549-2
      TF_VAR_enable_https_redirect: false
    when:
      event:
        - push

  - name: await ecs rollout
    image: docker
    environment:
      build_id_url: http://vccs-alb-dev-149543272.eu-west-2.elb.amazonaws.com/build_id
      build_id: ${DRONE_BUILD_NUMBER}
    commands:
      - apk add curl
      - sh build_utils/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push

  # Build pa11y-ci image
  - name: build pa11y-ci image
    image: docker
    commands:
      - cd pa11y
      - docker build -t pa11y-ci .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push

  # Trigger accessibility test
  - name: accessibility tests
    image: pa11y-ci
    pull: never
    environment:
      BASE_URL: http://vccs-alb-dev-149543272.eu-west-2.elb.amazonaws.com/
    commands:
      - mkdir screenshots
      - /usr/local/bin/pa11y-ci -c pa11y/.pa11yci.conf.js
    when:
      event:
        - push

  # Execute jMeter scripts via taurus
  - name: micro-performance tests
    image: blazemeter/taurus
    commands:
      - bzt jmeter/valid_vehicle_compliance.jmx jmeter/assertion.yml
      - bzt jmeter/invalid_vehicle_compliance.jmx jmeter/assertion.yml
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push

  # Execute OWASP Zap tests
  - name: owasp zap tests
    image: owasp/zap2docker-stable
    commands:
      - mkdir -p /zap/wrk
      - cp zap.conf /zap/wrk/zap.conf
      - cd /zap
      - zap-full-scan.py -t http://vccs-alb-dev-149543272.eu-west-2.elb.amazonaws.com -c zap.conf
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push

    # Build end to end tests docker image
  - name: build end to end test image
    image: docker:git
    commands:
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-QA-selenium.git
      - cd JAQU-CAZ-QA-selenium
      - docker build -t selenium-jaqu .
    environment:
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        - push

    # Run end to end tests
  - name: run end to end tests
    image: selenium-jaqu
    pull: never
    environment:
      BS_USERNAME:
        from_secret: browserstack_username
      BS_AUTHKEY:
        from_secret: browserstack_auth_key
      BASEURL_VCCS: 'http://vccs-alb-dev-149543272.eu-west-2.elb.amazonaws.com'
      VALID_USERNAME: 'edmond.chhung@informed.com'
      VALID_PASSWORD: 'Edc123.,'
      BROWSER_SET: 'min'
      SCREENSHOT_TYPE: 'base'
      VCCS_USER: 'vccsservice'
      VCCS_PASSWORD: 'Password001!'
      BUILD: ${DRONE_BUILD_NUMBER}
      SPECTRE: false
      LOCATION: browserstack
    commands:
      - cd JAQU-CAZ-QA-selenium
      - cucumber -t @VCCS --retry 3
    when:
      event:
        - push
  ################################################# End DEV Steps #######################################################








  ################################################### SIT Steps ########################################################

kind: pipeline
type: docker
name: vccs-web-sit
trigger:
  branch:
    - release/*
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker
    commands:
    - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker image
  - name: build
    image: docker
    commands:
    - docker build -f Dockerfile.test -t test-vehicle-compliance-checker-frontend:latest --build-arg secret_key_base=${DRONE_COMMIT} .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Trigger unit tests
  - name: unit tests
    image: test-vehicle-compliance-checker-frontend
    pull: never
    environment:
      COMPLIANCE_CHECKER_API_URL: http://localhost
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - yarn install
      - rspec -f d

  # Execute integration/scenario tests
  - name: integration tests
    image: test-vehicle-compliance-checker-frontend
    pull: never
    environment:
      COMPLIANCE_CHECKER_API_URL: https://s5fbiclr6j.execute-api.eu-west-2.amazonaws.com/dev
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - cucumber

  # Invoke static code analysis through Ruby libraries
  - name: static code analysis (Ruby)
    image: test-vehicle-compliance-checker-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - rubocop

  # Invoke security analysis through Ruby libraries
  - name: security tests (Ruby)
    image: test-vehicle-compliance-checker-frontend
    pull: never
    commands:
       - bundle audit check --update
       - yarn audit
       - brakeman
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

    # Push built image to ECR registry
  - name: publish image to ecr
    image: plugins/ecr
    settings:
      access_key:
        from_secret: aws_access_key_id
      secret_key:
        from_secret: aws_secret_access_key
      repo: 018330602464.dkr.ecr.eu-west-2.amazonaws.com/vccs-web
      registry: 018330602464.dkr.ecr.eu-west-2.amazonaws.com
      dockerfile: Dockerfile.build
      region: eu-west-2
      tags:
        - release
        - ${DRONE_BUILD_NUMBER}
      build_args:
        - secret_key_base=${DRONE_COMMIT}
    when:
      event:
        - push

  - name: plan updates in sit
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - cd terraform/projects/vccs/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
      - cd ../04.web
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base: ${DRONE_COMMIT}
      TF_VAR_google_analytics_id: UA-144774549-2
      TF_VAR_enable_https_redirect: false
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  - name: deploy to sit
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - cd terraform/projects/vccs/layers/01.networking
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
      - cd ../04.web
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base: ${DRONE_COMMIT}
      TF_VAR_google_analytics_id: UA-144774549-2
      TF_VAR_enable_https_redirect: false
    when:
      event:
        - push

  ################################################# End SIT Steps #######################################################








  ################################################ Secrets #########################################################

# Note the below values are pulled from AWS Secrets Manager via the aws-secrets Drone plugin
---
kind: secret
name: aws_access_key_id
get:
  path: /secret/drone.global
  name: awsAccessKeyId

---
kind: secret
name: aws_secret_access_key
get:
  path: /secret/drone.global
  name: awsSecretAccessKey

---
kind: secret
name: sonar_host
get:
  path: /secret/drone.global
  name: sonarHost

---
kind: secret
name: sonar_token
get:
  path: /secret/drone.global
  name: sonarToken

---
kind: secret
name: github_private_key
get:
  path: /secret/drone.global
  name: githubPrivateKey

---
kind: secret
name: browserstack_auth_key
get:
  path: /secret/drone.global
  name: browserStackAuthKey

---
kind: secret
name: browserstack_username
get:
  path: /secret/drone.global
  name: browserStackUsername

  ################################################ End Secrets #########################################################
