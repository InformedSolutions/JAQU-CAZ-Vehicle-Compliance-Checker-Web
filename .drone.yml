kind: pipeline
name: ci

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker
    commands:
    - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build docker image
  - name: build
    image: docker
    commands:
    - docker build -f Dockerfile.test -t test-vehicle-compliance-checker-frontend:latest --build-arg secret_key_base=${DRONE_COMMIT} .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
  
  # Trigger unit tests
  - name: unit tests
    image: test-vehicle-compliance-checker-frontend
    pull: never
    environment:
      COMPLIANCE_CHECKER_API_URL: http://localhost
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - yarn install
      - rspec -f d

  # Execute integration/scenario tests
  - name: integration tests
    image: test-vehicle-compliance-checker-frontend
    pull: never
    environment:
      COMPLIANCE_CHECKER_API_URL: https://jaqu-caz.herokuapp.com
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - cucumber
  
  # Invoke static code analysis through Ruby libraries
  - name: static code analysis (Ruby)
    image: test-vehicle-compliance-checker-frontend
    pull: never
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    commands:
      - rubocop

  # Invoke security analysis through Ruby libraries
  - name: security tests (Ruby)
    image: test-vehicle-compliance-checker-frontend
    pull: never
    commands:
       - bundle audit check --update
       - yarn audit
       - brakeman
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
  
  # Invoke sonar scan
  - name: sonar scan
    image: aosapps/drone-sonar-plugin
    environment:
      sonar_host:
        from_secret: sonar_host
      sonar_token:
        from_secret: sonar_token
      sonar.ruby.coverage.reportPaths: coverage/.resultset.json
    commands:
      - sonar-scanner 
        -Dsonar.projectKey=${DRONE_REPO}
        -Dsonar.projectName=${DRONE_REPO}
        -Dsonar.host.url=$sonar_host
        -Dsonar.login=$sonar_token
        -Dproject.settings=./sonar-project.properties
  
  # Invoke terraform scripts to ensure ecr is available for deploy step.
  - name: initialise ecr
    image: hashicorp/terraform:0.12.3
    commands:
      - git clone https://github.com/InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC/terraform/projects/vccs-web/environments/dev
      - terraform init
      - terraform workspace select dev || terraform workspace new dev
      - terraform apply -target=module.ecr -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
    #when:
    #  event:
    #    exclude:
    #    - pull_request
  
  # Push built image to ECR registry
  - name: publish image to ecr
    image: plugins/ecr
    settings:
      access_key:
        from_secret: aws_access_key_id
      secret_key:
        from_secret: aws_secret_access_key
      repo: 018330602464.dkr.ecr.eu-west-2.amazonaws.com/vccs-web
      registry: 018330602464.dkr.ecr.eu-west-2.amazonaws.com
      dockerfile: Dockerfile.build
      region: eu-west-2
      tags:
        - latest
        - ${DRONE_BUILD_NUMBER}
      build_args:
        - secret_key_base=secret
  #  when:
  #    event:
  #      exclude:
  #      - pull_request

  # Invoke terraform scripts with tagged image number
  - name: deploy
    image: hashicorp/terraform:0.12.3
    commands:
      - cd JAQU-CAZ-IAC/terraform/projects/vccs-web/environments/dev
      - terraform init
      - terraform workspace select dev
      - terraform apply -auto-approve
    environment:
      TF_VAR_build_number: ${DRONE_BUILD_NUMBER}
      TF_VAR_secret_key_base: secret
      TF_VAR_google_analytics_id: UA-144774549-2
      TF_VAR_compliance_checker: https://jaqu-caz.herokuapp.com
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
    #when:
    #  event:
    #    exclude:
    #    - pull_request

  # Build docker image
  - name: await ecs rollout
    image: docker
    environment:
      build_id_url: http://vccs-web-dev-1715195167.eu-west-2.elb.amazonaws.com/build_id
      build_id: ${DRONE_BUILD_NUMBER}
    commands:
      - apk add curl
      - sh build_utils/check_build_number.sh
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Execute OWASP Zap tests
  - name: owasp zap tests
    image: owasp/zap2docker-stable
    commands:
      - mkdir -p /zap/wrk
      - cp zap.conf /zap/wrk/zap.conf
      - cd /zap
      - zap-full-scan.py -t http://vccs-web-dev-1715195167.eu-west-2.elb.amazonaws.com -c zap.conf
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock
    when:
      event:
        exclude:
        - pull_request

  # Build jMeter image
  - name: build micro-perfomance image
    image: docker
    commands:
    - cd jmeter
    - docker build -t jmeter -f Dockerfile .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Execute jMeter using local built image
  - name: run micro-performance tests
    image: jmeter
    pull: never
    commands:
      - jmeter -n -t jmeter/valid_vehicle_compliance.jmx
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

# Triggers
trigger:
  branch:
  - develop
  event:
  - pull_request
  - push
